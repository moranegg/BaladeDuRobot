package graphes;



import java.io.File;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map.Entry;
import java.util.Queue;

import org.graphstream.graph.Graph;
import org.graphstream.graph.Node;

public class BFS {

	private Graph graph;
	private Node source;
	private HashMap<Node,Integer> distance;
	private HashMap<Node,Node> parent;
	
	public BFS(){
		distance = new HashMap<Node,Integer>();
		parent = new HashMap<Node,Node>();
	}
	
	public void init(Graph graph){
		this.graph = graph;
	}
	
	public void setSource(Node node){
		
		this.source = node;
		System.out.println(source);

	}
	
	public void compute(){
		  /* 1 Breadth-First-Search(G, v):
			 2
			 3     for each node n in G:            
			 4         n.distance = INFINITY        
			 5         n.parent = NIL
			 6 
			 7     create empty queue Q      
			 8 
			 9     v.distance = 0
			10     Q.enqueue(v)                      
			11 
			12     while Q is not empty:        
			13     
			14         u = Q.dequeue()
			15     
			16         for each node n that is adjacent to u:
			17             if n.distance == INFINITY:
			18                 n.distance = u.distance + 1
			19                 n.parent = u
			20                 Q.enqueue(n) */
		
		Queue<Node> file = new LinkedList<Node>();
		List<Node> marked = new LinkedList<Node>();
		
		for(Node node : graph.getEachNode()) {

			System.out.println(node.toString());
			
		    //HashMap<Integer,String> value = entry.getValue();		    
		}
		
		file.add(source);
		marked.add(source);
		Node s;
		
		while(!file.isEmpty()){
			s = file.poll();
			System.out.println("poll : "+s);
			
			
		}
		
	}
	
	
	
	
}
